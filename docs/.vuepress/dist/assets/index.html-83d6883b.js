import{_ as l}from"./ico_python-823ba1af.js";import{_ as c,r as a,o,c as d,d as n,e as s,b as t,w as r,a as e}from"./app-0eeb80e1.js";const u={},k=n("h1",{id:"python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python","aria-hidden":"true"},"#"),s(" Python")],-1),h={href:"https://www.python.org",target:"_blank",rel:"noopener noreferrer"},b=e('<img src="'+l+`"><p>Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p><p>Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。</p><p>像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License) 协议。</p><ul><li>本教程适合想从零开始学习 Python 编程语言的开发人员。当然本教程也会对一些模块进行深入，让你更好的了解 Python 的应用。</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><ul><li>什么是变量?</li></ul><p>在程序中一个可以变的值. 称之为变量.(类似于小学数学中的 x,y)</p><h3 id="申明一个变量" tabindex="-1"><a class="header-anchor" href="#申明一个变量" aria-hidden="true">#</a> 申明一个变量</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># 其中x就是变量, 等号左边的是变量,等号右边的是值.</span>

pirnt<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>10</p></blockquote><h3 id="变量的覆盖特性" tabindex="-1"><a class="header-anchor" href="#变量的覆盖特性" aria-hidden="true">#</a> 变量的覆盖特性</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># 其中x就是变量, 等号左边的是变量,等号右边的是值.</span>

x <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment"># 变量指向的值,是最后一次赋值的值.(变量可以覆盖指引)</span>

pirnt<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>12</p></blockquote><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li>什么是数据类型?</li></ul><p>在程序中,你要让程序明白,你输入的是文本? 还是数字? 还是对错?</p><p>则需要不同的数据类型来表示</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>用 &quot;英文双引号&quot;或者 &#39;英文单引号&#39; 扩起来的数据,称为字符串</p><div class="custom-container warning"><p class="custom-container-title">必须英文引号,否则报错</p><ul><li>英文引号 是 &quot;&quot; 或 &#39;&#39;</li><li>中文引号 是 “” 或 ‘’</li></ul><p>对比一下,区别还是很明显的.</p><p>怎么切换中英文?</p><p>一般 control + 空格 会切换. 也可以通过输入法,中英文字样切换.</p></div><ul><li>申明一个变量,指向字符串</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&#39;你好,自在老师&#39;</span> <span class="token comment"># 这就是一个 字符串 ,因为你好,自在老师,被引号包裹了.</span>

b <span class="token operator">=</span> <span class="token string">&quot;你好,自在老师&quot;</span> <span class="token comment"># 同样这也是申明了一个变量,指向了一个字符串.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h3><p>程序中,不加任何修饰符的数字,都是 数字类型</p><p>如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下,都是变量指向了 数字类型 (或 可以说:以下变量都是数字)</span>

a <span class="token operator">=</span> <span class="token number">10</span>

b <span class="token operator">=</span> <span class="token number">1.134</span>

c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔" tabindex="-1"><a class="header-anchor" href="#布尔" aria-hidden="true">#</a> 布尔</h3><p>布尔类型,只有两个固定的值: False(假) 和 True(真)</p><div class="custom-container warning"><p class="custom-container-title">为什么会存在布尔类型?</p><ul><li>是为了让程序判断真假,去执行不同的代码块</li></ul></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># a 指向了一个布尔值 (真)</span>

b <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment"># b 指向了一个布尔值 (假)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h2><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p><p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p><p>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</p><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p><p>列表的数据项不需要具有相同的类型</p>`,39),m=e(`<h3 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表" aria-hidden="true">#</a> 创建列表</h3><p>创建一个列表，只要把逗号分隔的不同的数据项使用 &#39;方括号&#39;[] 括起来即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下这些都是列表</span>
list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;AirScript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nspirit&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>
list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取列表中的值" tabindex="-1"><a class="header-anchor" href="#获取列表中的值" aria-hidden="true">#</a> 获取列表中的值</h3><p>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符.</p><div class="custom-container warning"><p class="custom-container-title">什么是索引,索引从0开始?</p><p>列表中的数据,自带索引也称 ‘角标’ 从0开始.</p><p>(通俗来讲:和军训报数一样,每个人都有一个代号,只不过列表报数从0开始)</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下这些都是列表</span>
list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;AirScript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nspirit&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;list1中的第一个值是: &quot;</span><span class="token punctuation">,</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;list2中的倒数第一个值是: &quot;</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;list2中的索引 1-4 的值: &quot;</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#注意这样的写法,包前不包后(通俗来讲:包含角标1,但不包含角标4的数据)</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;list2中的索引1 开始到结束的所有值 &quot;</span><span class="token punctuation">,</span> list2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>AirScript<br> 5<br> [2, 3, 4]<br> [2, 3, 4, 5]</p></blockquote><h3 id="更新列表" tabindex="-1"><a class="header-anchor" href="#更新列表" aria-hidden="true">#</a> 更新列表</h3><p>你可以对列表的数据项进行修改或更新</p><h4 id="通过索引即可更改值" tabindex="-1"><a class="header-anchor" href="#通过索引即可更改值" aria-hidden="true">#</a> 通过索引即可更改值</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;AirScript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nspirit&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span>

list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AirScript.cn&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>[&#39;AirScript.cn&#39;, &#39;nspirit&#39;, 1997, 2000, True]</p></blockquote><h3 id="删除列表元素" tabindex="-1"><a class="header-anchor" href="#删除列表元素" aria-hidden="true">#</a> 删除列表元素</h3><p>可以使用 del 语句来删除列表的元素，如下实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;AirScript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nspirit&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span>

<span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>[&#39;nspirit&#39;, 1997, 2000, True]</p></blockquote><h3 id="列表操作符" tabindex="-1"><a class="header-anchor" href="#列表操作符" aria-hidden="true">#</a> 列表操作符</h3><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><table><thead><tr><th>Python表达式</th><th style="text-align:center;">结果</th><th style="text-align:right;">描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td style="text-align:center;">3</td><td style="text-align:right;">获取列表长度</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td style="text-align:center;">[1, 2, 3, 4, 5, 6]</td><td style="text-align:right;">列表组合</td></tr><tr><td>[&#39;Hi!&#39;] * 4</td><td style="text-align:center;">[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</td><td style="text-align:right;">重复</td></tr><tr><td>3 in [1, 2, 3]</td><td style="text-align:center;">True</td><td style="text-align:right;">元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print x,</td><td style="text-align:center;">1 2 3</td><td style="text-align:right;">迭代列表中的数据</td></tr></tbody></table><h3 id="操作列表函数" tabindex="-1"><a class="header-anchor" href="#操作列表函数" aria-hidden="true">#</a> 操作列表函数</h3><p>操作列表的函数</p><table><thead><tr><th>Python表达式</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>cmp(list1, list2)</td><td style="text-align:center;">比较两个函数的元素</td></tr><tr><td>len(list)</td><td style="text-align:center;">列表元素个数</td></tr><tr><td>max(list)</td><td style="text-align:center;">返回列表元素最大值</td></tr><tr><td>min(list)</td><td style="text-align:center;">返回列表元素最小值</td></tr><tr><td>list(seq)</td><td style="text-align:center;">将元组转换为列表</td></tr></tbody></table><h3 id="列表函数" tabindex="-1"><a class="header-anchor" href="#列表函数" aria-hidden="true">#</a> 列表函数</h3><p>列表对象内部函数</p><table><thead><tr><th>Python表达式</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>list.append(obj)</td><td style="text-align:center;">在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td style="text-align:center;">统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td style="text-align:center;">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td style="text-align:center;">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td style="text-align:center;">将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td style="text-align:center;">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td style="text-align:center;">移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td style="text-align:center;">反向列表中元素</td></tr><tr><td>list.sort(cmp=None, key=None, reverse=False)</td><td style="text-align:center;">对原列表进行排序</td></tr></tbody></table><h2 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h2><p>元组创建很简单，只需要在‘圆括号’中添加元素，并使用逗号隔开即可。</p><div class="custom-container tip"><p class="custom-container-title">元祖和列表的区别?</p><ul><li>不同点:</li></ul><p>列表创建用 []<br> 元祖创建用 ()</p><p>列表可以更改内部值<br> 元祖不可以更改内部值</p><ul><li>其余一模一样</li></ul></div><h3 id="创建元祖" tabindex="-1"><a class="header-anchor" href="#创建元祖" aria-hidden="true">#</a> 创建元祖</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="元组方法" tabindex="-1"><a class="header-anchor" href="#元组方法" aria-hidden="true">#</a> 元组方法</h3><table><thead><tr><th>Python表达式</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>tuple(seq)</td><td style="text-align:center;">将列表转为元组</td></tr></tbody></table><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h2><h3 id="什么是字典" tabindex="-1"><a class="header-anchor" href="#什么是字典" aria-hidden="true">#</a> 什么是字典?</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。 字典的每个键值 key:value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token punctuation">:</span> value1<span class="token punctuation">,</span> key2 <span class="token punctuation">:</span> value2 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">字典的特性</p><p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tinydict1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">:</span> <span class="token number">456</span> <span class="token punctuation">}</span>
tinydict2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">98.6</span><span class="token punctuation">:</span> <span class="token number">37</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问字典里的值" tabindex="-1"><a class="header-anchor" href="#访问字典里的值" aria-hidden="true">#</a> 访问字典里的值</h3><p>把相应的键放入熟悉的方括弧，如下实例:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Zara&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;mydict[&#39;Name&#39;]: &quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;mydict[&#39;Age&#39;]: &quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>mydict[&#39;Name&#39;]: Zara<br> mydict[&#39;Age&#39;]: 7</p></blockquote><h3 id="修改字典" tabindex="-1"><a class="header-anchor" href="#修改字典" aria-hidden="true">#</a> 修改字典</h3><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Zara&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">}</span>

mydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Sara&#39;</span>

mydict<span class="token punctuation">[</span><span class="token string">&#39;Gender&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;boy&quot;</span>

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;mydict[&#39;Name&#39;]: &quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&quot;mydict[&#39;Gender&#39;]: &quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;Gender&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>mydict[&#39;Name&#39;]: Sara mydict[&#39;Gender&#39;]: boy</p></blockquote><h3 id="删除字典元素" tabindex="-1"><a class="header-anchor" href="#删除字典元素" aria-hidden="true">#</a> 删除字典元素</h3><p>能删单一的元素也能清空字典，清空只需一项操作。</p><p>显示删除一个字典用del命令，如下实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Zara&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">del</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>

<span class="token keyword">del</span> mydict

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>{&#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}</p></blockquote><h3 id="字典的特性" tabindex="-1"><a class="header-anchor" href="#字典的特性" aria-hidden="true">#</a> 字典的特性</h3><p>字典值可以没有限制地取任何 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><ul><li><ol><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Manni&#39;</span><span class="token punctuation">}</span> 
 
<span class="token keyword">print</span> <span class="token string">&quot;tinydict[&#39;Name&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>tinydict[&#39;Name&#39;]: Manni</p></blockquote><ul><li><ol start="2"><li>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行，如下实例：</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;Zara&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span> 
 
<span class="token keyword">print</span> <span class="token string">&quot;tinydict[&#39;Name&#39;]: &quot;</span><span class="token punctuation">,</span> tinydict<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><blockquote><p>TypeError: unhashable type: &#39;list&#39;</p></blockquote><h3 id="字典的内置方法" tabindex="-1"><a class="header-anchor" href="#字典的内置方法" aria-hidden="true">#</a> 字典的内置方法</h3><table><thead><tr><th>Python表达式</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>dict.clear()</td><td style="text-align:center;">删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td style="text-align:center;">返回一个字典的浅复制</td></tr><tr><td>dict.fromkeys(seq[, val])</td><td style="text-align:center;">创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td>dict.get(key, default=None)</td><td style="text-align:center;">返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>dict.has_key(key)</td><td style="text-align:center;">如果键在字典dict里返回true，否则返回false</td></tr><tr><td>dict.items()</td><td style="text-align:center;">以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>dict.keys()</td><td style="text-align:center;">以列表返回一个字典所有的键</td></tr><tr><td>dict.setdefault(key, default=None)</td><td style="text-align:center;">和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>dict.update(dict2)</td><td style="text-align:center;">把字典dict2的键/值对更新到dict里</td></tr><tr><td>dict.values()</td><td style="text-align:center;">以列表返回字典中的所有值</td></tr><tr><td>dict.pop(key[,default])</td><td style="text-align:center;">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td>dict.popitem()</td><td style="text-align:center;">返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h2 id="打印" tabindex="-1"><a class="header-anchor" href="#打印" aria-hidden="true">#</a> 打印</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>语法: print(*objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</p><table><thead><tr><th>参数</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td>objects</td><td style="text-align:left;">复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</td></tr><tr><td>sep</td><td style="text-align:left;">用来间隔多个对象，默认值是一个空格。</td></tr><tr><td>end</td><td style="text-align:left;">用来设定以什么结尾。默认值是换行符 \\n，我们可以换成其他字符串。</td></tr><tr><td>file</td><td style="text-align:left;">要写入的文件对象。</td></tr><tr><td>flush</td><td style="text-align:left;">输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</td></tr></tbody></table><h3 id="在控制台输出一段文本" tabindex="-1"><a class="header-anchor" href="#在控制台输出一段文本" aria-hidden="true">#</a> 在控制台输出一段文本</h3><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2>`,81);function v(g,y){const p=a("ExternalLinkIcon"),i=a("font");return o(),d("div",null,[k,n("p",null,[n("a",h,[s("Python官网"),t(p)])]),b,t(i,{color:"#3376d0"},{default:r(()=>[s("(通俗讲:列表就是一个储物柜,有很多格子,里面可以存放各种数据)")]),_:1}),m])}const q=c(u,[["render",v],["__file","index.html.vue"]]);export{q as default};
